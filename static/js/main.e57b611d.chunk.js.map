{"version":3,"sources":["components/Titles.js","components/Forms.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","className","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","Forms","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e57b611d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1>Weather Finder v1</h1>\r\n        <p>Easy way to find out the weather in your city!</p>\r\n    </div>\r\n);\r\n\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n        <button className=\"btn-1\">Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather-div\">\r\n        { props.city && props.country && <p className=\"weather-line\">Location:  {props.city}, {props.country}</p>}\r\n        { props.temperature && <p className=\"weather-line\">Temperature: {props.temperature}Â°C</p>}\r\n        { props.humidity && <p className=\"weather-line\">Humidity: {props.humidity}%</p> }\r\n        { props.description && <p className=\"weather-line\">Conditions: {props.description}</p> }\r\n        { props.error && <p className=\"weather-line\">{props.error}</p>}\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\n\nimport Titles from './components/Titles.js';\nimport Form from './components/Forms.js';\nimport Weather from './components/Weather.js';\n\nconst API_KEY = \"0021d931abac942a6b8f2a30d3e2a220\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch (`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if ( city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    }\n    else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value\",\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n\n          <div className=\"col-md-5 title-div\">\n            <Titles/>\n          </div>\n\n          <div className=\"col-md-7 form-div\">\n          <Form getWeather={this.getWeather} />\n          <Weather\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error}\n          />\n          </div>\n\n        </div>\n      </div>\n    );      \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}